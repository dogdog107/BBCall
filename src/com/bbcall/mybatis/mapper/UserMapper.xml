<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	这里namespace必须是UserMapper接口的全类名路径，
	不然运行的时候要报错 "is not known to the MapperRegistry" 
-->

<mapper namespace="com.bbcall.mybatis.dao.UserMapper">

    <!--mybatis ehcache缓存配置 -->
    <!-- 以下两个<cache>标签二选一,第一个可以输出日志,第二个不输出日志 -->
<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache" /> -->
<!-- <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

<!-- 
	## SQL Command ##
CREATE TABLE USER (
	user_id INT NOT NULL auto_increment PRIMARY KEY,
	user_account VARCHAR (30),
	user_password VARCHAR (30) NOT NULL,
	user_email VARCHAR (30),
	user_mobile BIGINT,
	user_type INT,
	/* 1=customer, 2=master, 3=admin */
	user_name VARCHAR (20),
	user_gender INT,
	/* 1=male, 2=female */
	user_pic_url VARCHAR (255),
	user_language VARCHAR (255),
  user_skill text,
  user_address_code INT,
	user_address text,
	user_description text,
	user_access_group VARCHAR (30),
	user_status INT,
	/* 1=active, 2=pause, 3=pending, 4=locked */
	user_create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	user_login_time TIMESTAMP NULL DEFAULT NULL,
	user_token VARCHAR (255)
) DEFAULT CHARSET = utf8;
 	
 	## Value ##
	private Integer user_id;
	private String user_account;
	private String user_password;
	private String user_email;
	private BigInteger user_mobile;
	private Integer user_type;
	private String user_name;
	private Integer user_gender;
	private String user_pic_url;
	private String user_language;
	private Integer user_address_code;
	private String user_address;
	private String user_skill;
	private String user_description;
	private String user_access_group;
	private Integer user_status;
	private Timestamp user_login_time;
	private Timestamp user_create_time;
	private String user_token;
 -->

<!-- 
	ID: 必须与对应接口的对应的方法名一致：
	void save(User user);
	void update(User user);
	void delete(int id);
	User findById(int id);
	List<User> findAll();
 -->

	<resultMap id="UserResultMap" type="com.bbcall.mybatis.table.User" >
    	<id column="user_id" property="user_id" jdbcType="INTEGER" />
    	<result column="user_account" property="user_account" jdbcType="VARCHAR" />
    	<result column="user_password" property="user_password" jdbcType="VARCHAR" />
    	<result column="user_email" property="user_email" jdbcType="VARCHAR" />
    	<result column="user_mobile" property="user_mobile" jdbcType="BIGINT" />
    	<result column="user_type" property="user_type" jdbcType="INTEGER" />
    	<result column="user_name" property="user_name" jdbcType="VARCHAR" />
    	<result column="user_gender" property="user_gender" jdbcType="INTEGER" />
    	<result column="user_pic_url" property="user_pic_url" jdbcType="VARCHAR" />
    	<result column="user_language" property="user_language" jdbcType="VARCHAR" />
    	<result column="user_address_code" property="user_address_code" jdbcType="INTEGER" />
    	<result column="user_address" property="user_address" jdbcType="VARCHAR" />
    	<result column="user_skill" property="user_skill" jdbcType="VARCHAR" />
    	<result column="user_description" property="user_description" jdbcType="VARCHAR" />
    	<result column="user_access_group" property="user_access_group" jdbcType="VARCHAR" />
    	<result column="user_status" property="user_status" jdbcType="INTEGER" />
    	<result column="user_login_time" property="user_login_time" jdbcType="TIMESTAMP" />
    	<result column="user_create_time" property="user_create_time" jdbcType="TIMESTAMP" />
    	<result column="user_token" property="user_token" jdbcType="VARCHAR" />
	</resultMap>

<!--     <resultMap type="Mail" id="result" extends="UserResultMap">  
        <collection property="attachments" javaType="ArrayList" column="id_mail" ofType="Attachment"   
        select="test.data.AttachmentMapper.selectByMailId"/>  
    </resultMap>   -->


	<insert id="addUserByAccount" parameterType="User"
		useGeneratedKeys="true" keyProperty="user_id">
		insert into USER(user_account,
		user_password, user_type, user_status, user_name, user_pic_url,
		user_mobile, user_gender, user_email, user_language, user_skill)
		values(#{user_account}, #{user_password}, #{user_type},
		#{user_status}, #{user_name}, #{user_pic_url}, #{user_mobile},
		#{user_gender}, #{user_email}, #{user_language}, #{user_skill})
	</insert>

	<select id="getUserByAccount" parameterType="String" resultMap="UserResultMap">
		select user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language, user_address_code,
		user_address, user_skill, user_description, user_access_group,
		user_status, user_login_time, user_create_time, user_token
		from USER
		where
		user_account=#{user_account}
	</select>
	<select id="getUserByEmail" parameterType="String" resultMap="UserResultMap">
		select user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language, user_address_code,
		user_address, user_skill, user_description, user_access_group,
		user_status, user_login_time, user_create_time, user_token
		from USER
		where
		user_email=#{user_email}
	</select>
	<select id="getUserByMobile" parameterType="String" resultMap="UserResultMap">
		select user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language, user_address_code,
		user_address, user_skill, user_description, user_access_group,
		user_status, user_login_time, user_create_time, user_token
		from USER
		where
		user_mobile=#{user_mobile}
	</select>

	<select id="getUserById" parameterType="int" resultMap="UserResultMap">
		select user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language, user_address_code,
		user_address, user_skill, user_description, user_access_group,
		user_status, user_login_time, user_create_time, user_token
		from USER
		where
		user_id=#{user_id}
	</select>

	<select id="getUserByToken" parameterType="String" resultMap="UserResultMap">
		select user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language, user_address_code,
		user_address, user_skill, user_description, user_access_group,
		user_status, user_login_time, user_create_time, user_token
		from USER
		where
		user_token=#{user_token}
	</select>
	
	<select id="findAll" resultMap="UserResultMap">
		select user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language, user_address_code,
		user_address, user_skill, user_description, user_access_group,
		user_status, user_login_time, user_create_time, user_token
		from USER
	</select>
	<select id="listUserOrderBy" resultMap="UserResultMap">
		select user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language, user_address_code,
		user_address, user_skill, user_description, user_access_group,
		user_status, user_login_time, user_create_time, user_token
		from USER
		<where>
			<if test="col_name!=null and search_value!=null and col_name!='' and search_value!=''">  
            	${col_name}=#{search_value}
        	</if>  
		</where>
		<if test="col_name!=null and specify_value!=null and col_name!='' and specify_value!=''">  
            order by if(${col_name}=#{specify_value},0,1),${col_name}
        </if>  
		<if test="col_name!=null and col_name!='' and (specify_value==null or specify_value=='')">  
            order by ${col_name}
        </if>  
	</select>
	
	<update id="updateUser" parameterType="User">
		update USER set
		user_account=#{user_account}, user_password=#{user_password},
		user_email=#{user_email}, user_mobile=#{user_mobile},
		user_type=#{user_type}, user_name=#{user_name},
		user_gender=#{user_gender}, user_pic_url=#{user_pic_url},
		user_language=#{user_language},
		user_address_code=#{user_address_code},
		user_address=#{user_address},
		user_description=#{user_description},
		user_access_group=#{user_access_group},
		user_status=#{user_status},
		user_skill=#{user_skill}
		where user_id=#{user_id}
	</update>

	<update id="updateToken" parameterType="User">
		update USER set
		user_token=#{user_token}
		where user_id=#{user_id}
	</update>

	<update id="updateLoginTime" parameterType="User">
		update USER set
		user_login_time=#{user_login_time}
		where user_id=#{user_id}
	</update>

<!-- 		
		select U.user_id user_id, user_account, user_password, user_email, user_mobile,
		user_type, user_name, user_gender, user_pic_url, user_language,
		user_address, group_concat(user_skill SEPARATOR ';') user_skill, user_description, user_access_group,
		user_status, user_login_time, user_token
		from USER U LEFT OUTER JOIN USERSKILL US ON U.user_id = US.user_id
		where
		user_account=#{user_account} 
-->

</mapper>    